# -*- coding: utf-8 -*-
"""Aula04

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/116gRFM_d3ZEW4FNtigpvuGYuld7IrvNo

#Aula 04: HSV

### Imports
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import cv2
import numpy as np
from matplotlib import pyplot as plt

"""### O que significa HSV?

* **H -> Hue, *Matiz*:** Descreve o pigmento de uma cor. Medido de 0 a 359 graus.
* **S -> Saturation, *Saturação*:** Descreve a vivacidade de uma cor. Medida em porcentagem de 0 a 100.
* **V -> Value, *Valor* ou B -> Brightness, *Brilho*:** Determina a intensidade percebida, onde 0 = preto e 100 = brilho máximo.

######A OpenCV usa valores de 8bits (0 - 255), o que significa que o valor da matiz deve ser dividido por 2.

#### Exemplo
"""

img = cv2.imread('HSV_colorspace.jpg')
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.figure(figsize = (5, 5))
plt.imshow(img)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# Imports
# %matplotlib inline
import cv2
import numpy as np
from matplotlib import pyplot as plt

# Nova biblioteca
import math # Biblioteca de matemática



"""### Desafio 13 (Aula 03)"""

img = cv2.imread("bolinha.png")

# Converter a imagem para RGB
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Converter a imagem para HSV
img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

# Definir dos valores mínimo e máximo da máscara para o magenta
img_min_hsv = np.array([130, 50, 50])  # Valores de magenta
img_max_hsv = np.array([170, 255, 255])  # Valores de magenta

# Aplicar a máscara para extrair o magenta da imagem
mask_hsv = cv2.inRange(img_hsv, img_min_hsv, img_max_hsv)

# Aplicar a máscara na imagem original
result = cv2.bitwise_and(img, img, mask=mask_hsv)

# Exibir a imagem original em RGB
plt.imshow(img_rgb)
plt.title("Imagem RGB")
plt.figure(figsize=(5, 5))
plt.show()

# Exibir a imagem com a máscara aplicada
result_rgb = cv2.cvtColor(result, cv2.COLOR_BGR2RGB)  # Convertendo para RGB para exibição
plt.imshow(result_rgb)
plt.title("Resultado da Máscara Magenta")
plt.figure(figsize=(5, 5))
plt.show()

"""### Desafio -> Melancia"""

img = cv2.imread("melancia.png")

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

img_min_hsv = np.array([0, 100, 210])
img_max_hsv = np.array([180, 255, 255])

mask_hsv = cv2.inRange(img_hsv, img_min_hsv, img_max_hsv)

plt.imshow(mask_hsv, cmap = "gray")
plt.title("Imagem HSV")
plt.show()

"""### Bolinha"""

img = cv2.imread("bolinha.png")

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

img_min_hsv = np.array([130, 50, 50])
img_max_hsv = np.array([170, 255, 255])

mask_hsv = cv2.inRange(img_hsv, img_min_hsv, img_max_hsv)

plt.imshow(mask_hsv, cmap = "gray")
plt.title("Imagem HSV")
plt.show()

"""### Contorno"""

contornos, _ = cv2.findContours(mask_hsv, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

mask_rgb = cv2.cvtColor(mask_hsv, cv2.COLOR_GRAY2RGB)

cv2.drawContours(mask_rgb, contornos, -1 ,(0, 255, 0), 8)

plt.imshow(mask_rgb)
plt.show()

print((len)(contornos))

"""### Desafio -> Naruto"""