# -*- coding: utf-8 -*-
"""Aula03

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/158qQeUS55KCsgbyx5MT_zvqzx1bkB97s

#Aula 03: Histograma e Segmentação

###Imports
"""

# Imports
import cv2
import numpy as np
from matplotlib import pyplot as plt

# Nova biblioteca
import math # Biblioteca de matemática

"""###Lenna

"""

img = cv2.imread("lenna.jpg")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)
plt.title("Lenna.jpg")
plt.show()

plt.hist(img.ravel(), 256, [0, 255])
plt.title("Histograma da Lenna")
plt.show()

"""### Fusca"""

# Carregando a imagem
img = cv2.imread("fusca.png")
img =  cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Exibindo a imagem original
plt.imshow(img)
plt.title("Fusca")
plt.show()

# Exibindo o histograma da imagem original
plt.hist(img.ravel(), 256, [0, 255])
plt.title("Histograma do Fusca")
plt.show()

"""###Equalizando a Imagem

"""

# Convertendo para escala de cinza
img =  cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Aplicando equalização de histograma
img_eq = cv2.equalizeHist(img)

# Exibindo a imagem equalizada
plt.imshow(3*img_eq, cmap="Greys_r", vmin=0, vmax=255)
plt.title("Imagem Equalizada")
plt.show()

# Exibindo o histograma da imagem equalizada
plt.hist(img_eq.ravel(), bins=256, range=(0, 255), color='gray')
plt.title("Histograma da Imagem Equalizada")
plt.xlabel("Intensidade de pixel")
plt.ylabel("Frequência")
plt.show()

"""### Imagem Colorida

"""

img = cv2.imread("bola.png")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)
plt.title("Imagem Colorida")
plt.show()

# Controle de intensidade (vmin e vmax)
plt.imshow(img, vmin=0, vmax=255)
plt.title("Imagem exibida com controle de intensidade")
plt.show()

# Geração e exibição do histograma
plt.hist(img.ravel(),256,[0,256])
plt.title("Histograma")
plt.show()

"""### Histogramas segmentados por canais de cores

#### Histograma Vermelho
"""

# Exibição da Imagem no Canal Vermelho:
# img[:,:,0] -> Seleciona somente o canal vermelho
# cmap="gray" -> Instrui o Matplotlib a exibir a imagem em  cinza
# vmin=0, vmax=255 -> Define o intervalo de valores para o mapeamento de intensidades
plt.imshow(img[:,:,0], cmap="gray", vmin=0, vmax=255)
plt.title("Imagem no canal vermelho")
plt.show()


# Geração do Histograma do Canal Vermelho:
plt.hist(img[:,:,0].ravel(), 256, [0, 256]); plt.show()
plt.show()

"""#### Histograma Verde

"""

# Exibição da Imagem no Canal Verde:
# img[:,:,0] -> Seleciona somente o canal verde
# cmap="gray" -> Instrui o Matplotlib a exibir a imagem em  cinza
# vmin=0, vmax=255 -> Define o intervalo de valores para o mapeamento de intensidades
plt.imshow(img[:,:,1], cmap="gray", vmin=0, vmax=255)
plt.title("Imagem no canal verde")
plt.show()


# Geração do Histograma do Canal verde:
plt.hist(img[:,:,1].ravel(), 256, [0, 256]); plt.show()
plt.show()

"""#### Histograma Azul

"""

# Exibição da Imagem no Canal Azul:
# img[:,:,0] -> Seleciona somente o canal azul
# cmap="gray" -> Instrui o Matplotlib a exibir a imagem em  cinza
# vmin=0, vmax=255 -> Define o intervalo de valores para o mapeamento de intensidades
plt.imshow(img[:,:,2], cmap="gray", vmin=0, vmax=255)
plt.title("Imagem no canal azul")
plt.show()


# Geração do Histograma do Canal azul:
plt.hist(img[:,:,2].ravel(), 256, [0, 256]); plt.show()
plt.show()

"""### Segmentação de Cores"""

# Gera uma cópia
img2 = img.copy()

# Extrai as cores
gray_red = img2[:,:,0]
gray_green = img2[:,:,1]
gray_blue = img2[:,:,2]

# Cópia de img2 para criar uma nova imagem chamada img_bola;
img_bola = img2.copy()

# Loop para processar a imagem pixel por pixel:
for y in range(0, img2.shape[0]):
  for x in range (0, img2.shape[1]):
    if gray_green [y] [x] <= 230: # Se o valor de green do pixel for menor ou igual a 230:
      img_bola [y] [x] = 0 # Define o valor de img_bola[y][x] como 0, o que significa que o pixel é apagado (preto)
    if gray_blue [y] [x] <= 240: # Se o valor de blue do pixel for menor ou igual a 240:
      img_bola [y] [x] = 0 # Define o valor de img_bola[y][x] como 0, o que significa que o pixel é apagado (preto)

# Exibição da imagem dentro do loop:
plt.imshow(img_bola, interpolation="none")
plt.show()

"""### Desafio 12

"""

img = cv2.imread("bola.png")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Gerar uma cópia da imagem
img3 = img.copy()

# Extrair as cores
img3_vermelho = img3[:,:,0]
img3_verde = img3[:,:,1]
img3_azul = img3[:,:,2]

# Cópia para criar uma imagem segmentada
img_bola = img3.copy()

# Loop para processar a imagem pixel por pixel
for y in range(img3.shape[0]):
    for x in range(img3.shape[1]):
        # Ajustar os limites para segmentar apenas a bolinha laranja
        if not (
            # Vermelho alto
            img3_vermelho[y, x] > 170 and
            # Verde médio (para evitar vermelho puro)
            100 < img3_verde[y, x] < 190 and
            # Azul baixo (para evitar outras cores)
            img3_azul[y, x] < 90):
            img_bola[y, x] = [0, 0, 0]  # Definir como preto os pixels que não atendem ao critério

# Exibir a imagem segmentada
plt.imshow(img_bola, interpolation = "none")
plt.axis("off")
plt.title("Desafio 12")
plt.show()

"""### Desafio 13"""

# Carregar e converter a imagem
img = cv2.imread("bolinha.png")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

# Gerar uma cópia da imagem
img2 = img.copy()

# Extrair as cores
img2_vermelho = img2[:, :, 0]
img2_verde = img2[:, :, 1]
img2_azul = img2[:, :, 2]

# Cópia para criar uma imagem segmentada
img_bolinha = img2.copy()

# Loop para processar a imagem pixel por pixel
for y in range(img2.shape[0]):
    for x in range(img2.shape[1]):
        # Ajustar os limites para retirar a bolinha
        if (
            (img2_vermelho[y, x] >= 235 and
            img2_azul[y, x] >= 235 and
            img2_verde[y, x] >= 235) or
            img2_vermelho[y, x] <= 230 or
            img2_azul[y, x] <= 180 or
            img2_verde[y, x] <= 100
        ):
            img_bolinha[y, x] = [0, 0, 0]

# Exibir a imagem
plt.imshow(img_bolinha, vmin=0, vmax=255)
plt.axis("off")
plt.title("Desafio 13")
plt.show()