# -*- coding: utf-8 -*-
"""Checkpoint01

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pgf_9XaBJWFWcyQrNshlFcxQN-h4YaTc

##**Checkpoint 01**

Ana Luísa Elias - RM: 93686
Victor Mori - RM: 93121
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt

# Desafio 01
img_alfabeto = cv2.imread("alfabeto.JPG")
img_alfabeto = cv2.cvtColor(img_alfabeto, cv2.COLOR_BGR2RGB)
plt.imshow(img_alfabeto)

img_hsv = cv2.cvtColor(img_alfabeto, cv2.COLOR_RGB2HSV)
plt.imshow(img_hsv)

img_min_hsv = np.array([20, 100, 100])
img_max_hsv = np.array([40, 255, 255])

mask_hsv = cv2.inRange(img_hsv, img_min_hsv, img_max_hsv)

result = cv2.bitwise_and(img_alfabeto, img_alfabeto, mask=mask_hsv)

plt.imshow(result, cmap="gray")
plt.show()

img_a = result.copy()

img_a = result[0:150, 0:150]

plt.imshow(img_a)
plt.show()

img_v = result.copy()

img_v = result[400:550, 100:250]

plt.imshow(img_v)
plt.show()

# Desafio 02
img_frutas = cv2.imread("Frutas.jpg")
img_frutas = cv2.cvtColor(img_frutas, cv2.COLOR_BGR2RGB)
plt.imshow(img_frutas)

img_hsv = cv2.cvtColor(img_frutas, cv2.COLOR_RGB2HSV)
plt.imshow(img_hsv)

img_min_hsv = np.array([75, 40, 40])
img_max_hsv = np.array([120, 255, 255])

mask_hsv = cv2.inRange(img_hsv, img_min_hsv, img_max_hsv)

result = cv2.bitwise_and(img_frutas, img_frutas, mask=mask_hsv)

plt.imshow(result, cmap="gray")
plt.show()

# Desafio 03
img = cv2.imread("ts2.png")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.imshow(img)

print("SHAPE:")
print("Dimensões da imagem:", img.shape)
print("Quantidade de linhas:", img.shape[0])
print("Quantidade de colunas:", img.shape[1])
print("Camadas de cores:", img.shape[2])

print("MATRIZ:")
print("Dimensões da imagem: \n", img)

plt.hist(img.ravel(), 256, [0,256])
plt.show()

img_cinza = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
plt.imshow(img_cinza, cmap="gray")
plt.show()

img_inv = 255 - img

plt.imshow(img_inv, cmap="gray", interpolation="none")
plt.show()

B, G, R = cv2.split(img)

tresh = 20

img_bin = cv2.threshold(R, tresh, 255, cv2.THRESH_BINARY)[1]

plt.imshow(img_bin, cmap='gray')
plt.show()