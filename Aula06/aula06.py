# -*- coding: utf-8 -*-
"""Aula06

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1owAR-yYmGYnUMkrx1eGYCrngWiPw7CRY

#Aula 06: Hough e Morfologia

### Imports
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import cv2
import numpy as np
from matplotlib import pyplot as plt
import math

"""### Transformada de Hough + Desafio Formas

"""

# Img Formas
img = cv2.imread('formas.png')
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.title('Formas')
plt.imshow(img)

img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
edges = cv2.Canny(img_gray, 50, 150)
circles = cv2.HoughCircles(
    img_gray,
    cv2.HOUGH_GRADIENT,
    dp=1.2,
    minDist=50,
    param1=50,
    param2=30,
    minRadius=55,
    maxRadius=150
)
bordas_rgb = cv2.cvtColor(edges, cv2.COLOR_GRAY2RGB)
output = bordas_rgb

if circles is not None:
  circles = np.uint16(np.around(circles))
  for i in circles[0, :]:
    # Desenha o contorno
    cv2.circle(output,(i[0], i[1]), i[2], (0, 255, 0), 2)
    # Desenha o centro
    cv2.circle(output, (i[0], i[1]), 2, (0,0,255), 3)

plt.figure(figsize=(10,10))
plt.imshow(output, cmap='grey')

"""### Desafio Moedas"""

# Img Coins
img = cv2.imread('coins.png')
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.title('Moedas')
plt.imshow(img)

img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
edges = cv2.Canny(img_gray, 50, 150)
circles = cv2.HoughCircles(
    img_gray,
    cv2.HOUGH_GRADIENT,
    dp=1,
    minDist=100,
    param1=50,
    param2=30,
    minRadius=75,
    maxRadius=80
)
bordas_rgb = cv2.cvtColor(edges, cv2.COLOR_GRAY2RGB)
output = bordas_rgb

if circles is not None:
  circles = np.uint16(np.around(circles))
  for i in circles[0, :]:
    # Desenha o contorno
    cv2.circle(output,(i[0], i[1]), i[2], (0, 255, 0), 2)
    # Desenha o centro
    cv2.circle(output, (i[0], i[1]), 2, (0,0,255), 3)

plt.figure(figsize=(5,5))
plt.imshow(output, cmap='grey')
plt.title("Desenho")
plt.show()

"""### Detecção de Retas"""

img = cv2.imread ('formas.png')
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)
plt.show()

img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
edges = cv2.Canny(img_gray, 50, 150)

lines = cv2.HoughLinesP(
    edges,
    1,
    math.pi/180.0,
    55,
    np.array([]),
    10,
    10)

hough_img = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)

for line in lines:
  x1, y1, x2, y2 = line[0]
  cv2.line(hough_img, (x1, y1), (x2, y2), (255, 0, 255), 5)

plt.imshow(hough_img)
plt.show()

"""### Detecção de faixas por veículos autônomos

"""

img = cv2.imread('rua.png')
img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

edges = cv2.Canny(img_gray, 50, 200)
lines = cv2.HoughLinesP(
    edges,
    1,
    math.pi/180.0,
    99,
    np.array([]),
    3,
    120
)

hough_img = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)

for line in lines:
  x1, y1, x2, y2 = line[0]
  cv2.line(hough_img, (x1,y1), (x2,y2), (255, 0, 255), 5)

  plt.imshow(hough_img)

"""##Morfologia

"""

img = cv2.imread('j.png', 0)
plt.imshow(img, cmap="gray")
plt.show

"""### Dilatação Binária

"""

kernel = np.ones((5,5), np.uint8)
dilation = cv2.dilate(img, kernel, iterations = 1)

plt.imshow(dilation, cmap = "gray")

"""### Detectando contorno com dilatação"""

dst = img.copy()
kernel = np.ones((5,5), np.uint8)

dilation = cv2.dilate(img,kernel,iterations=1)

dst = dilation - img

plt.imshow(dst, cmap="gray")

"""### Erosão Binária"""

dst = img.copy()
kernel = np.ones((6,6), np.uint8)

erode = cv2.erode(img, kernel, iterations = 1)

plt.imshow(erode, cmap="gray")

"""### Abertura Binária"""

img = cv2.imread('j-noise.png', 0)

plt.imshow(img, cmap = 'gray')

plt.show()

dst = img.copy()
kernel = np.ones((7,7), np.uint8)

opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)

plt.imshow(opening, cmap='gray')

"""### Fechamento binário"""

img = cv2.imread('holes.png', 0)

plt.imshow(img, cmap = 'gray')

plt.show()

dst = img.copy()
kernel = np.ones((7,7), np.uint8)

opening = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel)

plt.imshow(opening, cmap='gray')