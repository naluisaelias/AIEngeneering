# -*- coding: utf-8 -*-
"""Aula12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qpk3Oo9OfkWYqusT2zfudvKDxGQzBy-H

# Aula 12 - Dataframe
"""

import matplotlib.pyplot as plt

"""## Pandas
Biblioteca Python para manipulação e análise de dados, especialmente em formato de tabelas (DataFrames) e listas/colunas (Series). É amplamente utilizada em ciência de dados, análise exploratória e preparação de dados para modelos.
"""

import pandas as pd

# Criar dataframe
data = {
    "Nome": ["AnaLu", "Mori", "Gabriel"],
    "Idade": [22, 12, 23]
}

# Carregar dataframe
df = pd.DataFrame(data)

# Imprimir dataframe
print (df)

data = [["Nalu", 22], ["Cris", 53], ["Kennedy", 52]]

df = pd.DataFrame(data)

print (df)

"""## Dataset
Conjunto estruturado de dados usados para análise, treinamento de modelos ou experimentos.

### Principais características:
* **Observações (linhas):** Cada linha representa um registro ou exemplo.
* **Atributos (colunas):** Variáveis ou características que descrevem cada observação.
* **Tipos de dados:** Numéricos, categóricos, texto, data/hora etc.
* **Origem:** Podem ser coletados manualmente, gerados automaticamente ou baixados de repositórios públicos.
"""

# Caminho do arquivo
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"

# Lê e carrega o arquivo p/ memória
df = pd.read_csv(url)

print(df)

# Trecho com as 5 primeiras linhas do dataframe
df.head()

# Definir o nome das colunas
header = [
    'sepal_length',
    'sepal_width',
    'petal_length',
    'petal_width',
    'species'
]

# Ler e carregar o arquivo para a memória
df = pd.read_csv(url, header= None, names=header)

# Trecho com as 5 primeiras linhas do dataframe
df.head()

# Mostrar informações sobre o dataframe
df.info()

# Exibir o shape do dataframe
df.shape

# Exibir a classe de distribuição do dataframe
print(df.groupby('species').size())

"""## Desafio 01"""

# Quantos dados existem nesse dataset?
df.shape[0] # Número de linhas

# Qual a quantidade de atributos?
df.shape[1] # Número de colunas

# Existem valores faltantes?
df.isnull().sum()  # Mostra valores faltantes por coluna

# De que tipo são os dados (dtype)?
df.dtypes

"""## Analisando os dados mais a fundo
São 150 exemplares de flor de íris, pertencentes a três espécies diferentes: **setosa**, **versicolor** e **virginica**, sendo 50 amostras de cada espécie. Os atributos de largura e comprimento de sépala e largura e comprimento de pétala de cada flor fooram medidos manualmente.

"""

# Retornar a descrição dos dados
df.describe()

# Exibir a coluna não numérica 'species' - rótulos
df.species.unique()

"""## Analisando informações com gráficos

### Gráfico de Barras
"""

species_count = df['species'].value_counts()
species_count.plot(kind='bar')

plt.title('Contagem de Espécies')
plt.xlabel('Espécie')
plt.ylabel('Contagem')
plt.show()

"""### Box and Whisker Plots
Tipo de gráfico usado para resumir a distribuição de dados e identificar padrões.
#### Elementos do boxplot:
* **Caixa (box):** Representa o intervalo interquartil (IQR) -> vai do 1º quartil (Q1) ao 3º quartil (Q3). 50% dos dados estão dentro dessa caixa.
* **Linha dentro da caixa:** É a mediana (Q2), o valor central dos dados.
* **Bigodes (whiskers):** Se estendem até o menor e o maior valor que não é considerado outlier. Normalmente vão até Q1 - 1,5 × IQR no lado inferior e Q3 + 1,5 × IQR no lado superior.
* **Pontos fora dos bigodes:** São outliers, valores muito afastados do restante dos dados.
"""

df.plot(
    kind='box',        # Tipo de gráfico
    subplots=True,     # Gráfico por coluna
    layout=(2,2),      # Organização dos gráficos
    sharex=False,      # Cada gráfico com seu eixo X
    figsize=(5, 5)   # Tamanho da figura em polegadas
)
plt.show()

"""### Histograma
Gráfico que mostra a frequência com que os valores aparecem, agrupando-os em intervalos *(bins)*. É útil para visualizar a distribuição dos dados.
#### Elementos do histograma:
* **Eixo X:** Intervalo de valores (faixas).
* **Eixo Y:** Frequência (quantidade de valores que caem em cada intervalo).
* **Altura das barras:** Mostra quantas observações existem em cada faixa de valores.

"""

df.hist(
    bins=100, # Número de divisões do histograma. Mais bins, mais detalhes
    figsize=(5,5) # Tamanho total da figura
)
plt.show()

"""### Scatter Plot Matrix
Conjunto de gráficos de dispersão (scatter plots) organizados em formato de matriz, onde cada variável é comparada com todas as outras. É útil para identificar relações, padrões e correlações entre variáveis numéricas.
####Elementos do gráfico:
* **Gráficos fora da diagonal:** Relação entre duas variáveis diferentes. Cada ponto representa uma observação.
* **Gráficos na diagonal:** Histograma ou density plot da própria variável.
* **Pontos agrupados:** Indicam padrões ou separação entre classes.
* **Pontos formando uma linha:** Indicam correlação forte entre as variáveis.

"""

from pandas.plotting import scatter_matrix
scatter_matrix(df, figsize=(5, 5))
plt.show()

"""## Seaborn
Biblioteca Python para visualização de dados baseada no Matplotlib, projetada para criar gráficos estatísticos mais bonitos e informativos com menos código.
"""

# Import da biblioteca
import seaborn as sns

"""### Pairplot
Tipo especial de gráfico que gera vários gráficos de dispersão e histogramas/density plots organizados em uma matriz, para que cada variável numérica de um dataset seja comparada com todas as outras ao mesmo tempo.
* **Colunas da matriz:** Eixo X.
* **Linhas da matriz:** Eixo Y.
* **Diagonal:** Histogramas ou density plots → Distribuição de uma variável.
* **Fora da diagonal:** Scatter plots → Relação entre duas variáveis.
"""

sns.pairplot(
    df, # Dados a serem plotados
    hue='species', # Colorir os pontos de acordo com a categoria
    height=1.5 # Altura de cada gráfico
    )

plt.show()

"""### Violin plot
Tipo de gráfico similar ao boxplot, mas que também mostra a distribuição de densidade dos dados em cada nível de uma variável categórica. Ele combina informações de um boxplot com um kernel density plot.
#### Elementos do gráfico:
* **Forma semelhante a um violino:** Largura em cada ponto indica a densidade dos dados (mais largo = mais valores naquela faixa).
* **Linha interna:** Marca a mediana e, se configurado, os quartis (com `inner='quartile'`).
* Eixos:
  * Um eixo com a variável categórica (`y='species'`).
  * Outro eixo com a variável numérica (`x='sepal_length'`).
"""

# Sepal-Length
g = sns.violinplot(
    y = 'species', # Variável categórica para separar os violinos
    x = 'sepal_length', # Variável numérica cuja distribuição será mostrada
    data = df, # Dados
    inner = 'quartile' # Exibe linhas internas indicando a mediana e os quartis dentro de cada violino.
)

plt.show()

# Sepal-Width
g = sns.violinplot(y = 'species', x = 'sepal_width', data = df, inner = 'quartile')
plt.show()

# Petal-Length
g = sns.violinplot(y = 'species', x = 'petal_length', data = df, inner = 'quartile')
plt.show()

# Petal-Width
g = sns.violinplot(y = 'species', x = 'petal_width', data = df, inner = 'quartile')
plt.show()

"""### Correlação entre atributos
A matriz de correlação avalia a relação entre duas ou mais variaveis
(correlação).
#### Valores:
* 0.9 a 1 positivo ou negativo indica uma correlação muito forte.
* 0.7 a 0.9 positivo ou negativo indica uma correlação forte.
* 0.5 a 0.7 positivo ou negativo indica uma correlação moderada.
* 0.3 a 0.5 positivo ou negativo indica uma correlação fraca.
* 0 a 0.3 positivo ou negativo indica uma correlação desprezível.

"""

# Lista com as colunas numéricas que serão analisadas.
cols = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']

# Calcula a matriz de correlação entre essas colunas.
corr_matx = df [cols].corr()

heatmap = sns.heatmap(corr_matx, cbar= True, annot =True, square=True, fmt='.2f', annot_kws={'size': 15}, yticklabels=cols, xticklabels=corr_matx)
# cbar=True → Exibe a barra lateral de cores.
# annot=True → Exibe os valores numéricos dentro de cada célula.
# square=True → Deixa cada célula quadrada.
# fmt='.2f' → Formata os números para 2 casas decimais.
# annot_kws={'size': 15} → Define o tamanho da fonte dos números anotados.
# yticklabels=cols e xticklabels=corr_matx → Define os rótulos dos eixos.

"""## Desafio 02

A especie que possui na média a menor sepala é a mesma que possui a menor petala?
"""

df.groupby('species')[['sepal_length', 'petal_length']].mean()

"""Existe sobreposição entre as medições, ou seja, uma petala de tamanho x pode ser tanto da especie versicolor ou da virginica?"""

sns.scatterplot(data=df, x='petal_length', y='petal_width', hue='species')
plt.show()

"""É possivel classificar as especies de iris com base apenas em suas dimensões?"""

sns.pairplot(df, vars=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'], hue='species', height=2.5)
plt.show()

"""## Acessando dados de um Dataframe

### Acessar uma coluna através do  índice
"""

df['petal_length'].head()

df[['petal_length', 'petal_w']].head()